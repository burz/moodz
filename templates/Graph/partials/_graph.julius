var margin = {top: 20, right: 80, bottom: 30, left: 50};
var width = 960 - margin.left - margin.right;
var height = 400 - margin.top - margin.bottom;

var parseDate = d3.time.format("%Y-%m-%dT%H:%M:%S.%LZ").parse;

var x = d3.time.scale().range([0, width]);
var y = d3.scale.linear().range([height, 0]);

var color = d3.scale.category10();

var xAxis = d3.svg.axis().scale(x).orient("bottom");
var yAxis = d3.svg.axis().scale(y).orient("left");

var line = d3.svg.line().interpolate("basis")
        .x(function (d) { return x(d.time); })
        .y(function (d) { return y(d.value); });

var svg = d3.select("#graphCanvas").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

function reloadGraph(data, average) {
    $("#graphCanvas svg g").empty();

    loadGraph(data, average);
}

function forEachValue(data, f) {
    data.forEach(function (d) {
        d.data.forEach(f);
    });
}

function setDomain(data, average) {
    var times = [];

    forEachValue(data, function (d) {
        d.time = parseDate(d.created);

        times.push(d.time);
    });

    if(!(average === undefined)) {
        if(average.selection === "1") {
            data.push({
                data: ___averages___.a1
            });

            ___averages___.a1.forEach(function (d) {
                times.push(d.time);
            });
        }
        else if(average.selection === "3") {
            data.push({
                data: ___averages___.a3
            });

            ___averages___.a3.forEach(function (d) {
                times.push(d.time);
            });
        }
        else if(average.selection === "7") {
            data.push({
                data: ___averages___.a7
            });

            ___averages___.a7.forEach(function (d) {
                times.push(d.time);
            });
        }
        else if(average.selection === "-1") {
            data.push({
                data: ___averages___.am
            });

            ___averages___.am.forEach(function (d) {
                times.push(d.time);
            });
        }
        else {
            data.push({
                data: ___averages___.ay
            });

            ___averages___.ay.forEach(function (d) {
                times.push(d.time);
            });
        }
    }

    x.domain(d3.extent(times, function (d) { return d; }));

    y.domain([
        d3.min(data, function (d) {
            return d3.min(d.data, function (d) { return d.value; });
        }),
        d3.max(data, function (d) {
            return d3.max(d.data, function (d) { return d.value; });
        })
    ]);

    if(!(average === undefined)) {
        data.length -= 1;
    }
}

function loadGraph(data, average) {
    var names = data.map(function (v) {
        return v.name;
    }).push("average");

    color.domain(d3.keys(names));

    if(!(average === undefined)) {
        generateAverage(data[0].data, average.selection);
    }

    setDomain(data, average);

    svg.append("g").attr("class", "x axis")
            .attr("transform", "translate(0," + (height + 10) + ")")
            .call(xAxis);

    svg.append("g").attr("class", "y axis")
            .attr("transform", "translate(-10, 0)")
            .call(yAxis);

    if(!(average === undefined)) {
        drawAverage(average.selection);
    }

    var nodes = [];

    data.forEach(function (v, i) {
        if(i != 0 || average === undefined) {
            var c = color(v.name);

            svg.append("path")
                    .attr("d", line(v.data))
                    .attr("stroke", c)
                    .attr("stroke-width", 1)
                    .attr("fill", "none");

            v.data.forEach(function (d) {
                nodes.push({
                    color: c,
                    data: d
                });
            });
        }
    });

    var node = svg.selectAll(".node")
        .data(nodes)
        .enter()
        .append("a")
        .attr("class", "node")
        .attr("transform", function (d) {
            return "translate(" + x(d.data.time) + "," + y(d.data.value) + ")";
        });

    var circle = node.append("circle")
        .attr("stroke", "black")
        .attr("fill", function (d) { return d.color; })
        .attr("r", 3.75);

    $('svg .node').tipsy({
        gravity: $.fn.tipsy.autoNS,
        html: true,
        title: function () {
            var d = this.__data__;

            var date = new Date(d.data.created);

            var dataColor = function (c) {
                return '<span style="font-size: 150%; color: ' +
                        d.color + ';">' + c + "</span>";
            };

            var string = "Date: " + dataColor(date.toDateString()) +
                         "<br>Time: " + dataColor(date.toTimeString()) +
                         "<br>Value: " + dataColor(d.data.value);

            if(d.data.notes === null) {
                return string;
            }
            else
            {
                return string + '<br>Notes:<span style="font-size: 150%; color: ' +
                       d.color + ';"> ' + d.data.notes + "</span>";
            }
        }
    })
}

var ___averages___ = {
    a1: null,
    a3: null,
    a7: null,
    am: null,
    ay: null
};

function generateAverage(values, averageType) {
    if(averageType === "1" && ___averages___.a1 == null ||
       averageType === "3" && ___averages___.a3 == null ||
       averageType === "7" && ___averages___.a7 == null ||
       averageType === "-1" && ___averages___.am == null ||
       averageType === "-2" && ___averages___.ay == null) {
        var dateMin = d3.min(values, function (d) { return d.time; });
        var dateMax = d3.max(values, function (d) { return d.time; });

        var currentDate = new Date(dateMin);
        currentDate.setHours(0, 0, 0, 0);
        currentDate.setDate(currentDate.getDate() - 1);

        var dateRange = [new Date(currentDate)];

        var getAverage = function (i) {
            var nextDate = dateRange[i];

            var relevantValues = [];

            if(i < 0) {
                relevantValues = values.filter(function (d) {
                    return d.time < nextDate;
                });
            }
            else {
                var previousDate = dateRange[i - 1];

                relevantValues = values.filter(function (d) {
                    return previousDate < d.time && d.time < nextDate;
                });
            }

            if(relevantValues.length === 0) {
                return null;
            }

            return relevantValues.map(function (value) {
                return value.value;
            }).reduce(function (previous, current) {
                return previous + current;
            }) / relevantValues.length;
        }

        var data = [];

        if(averageType === "1") {
            for(var i = 1; currentDate <= dateMax; ++i) {
                currentDate.setDate(currentDate.getDate() + 1);

                dateRange.push(new Date(currentDate));

                var average = getAverage(i);

                if(!(average === null)) {
                    data.push({
                        time: dateRange[i],
                        value: average
                    });
                }
            }

            ___averages___.a1 = data;
        }
        else if(averageType === "3") {
            for(var i = 1; currentDate <= dateMax; ++i) {
                currentDate.setDate(currentDate.getDate() + 3);

                dateRange.push(new Date(currentDate));

                var average = getAverage(i);

                if(!(average === null)) {
                    data.push({
                        time: dateRange[i],
                        value: average
                    });
                }
            }

            ___averages___.a3 = data;
        }
        else if(averageType === "7") {
            for(var i = 1; currentDate <= dateMax; ++i) {
                currentDate.setDate(currentDate.getDate() + 7);

                dateRange.push(new Date(currentDate));

                var average = getAverage(i);

                if(!(average === null)) {
                    data.push({
                        time: dateRange[i],
                        value: average
                    });
                }
            }

            ___averages___.a7 = data;
        }
        else if(averageType === "-1") {
            ___averages___.am = [];
        }
        else {
            ___averages___.ay = [];
        }
    }
}

function drawAverage(selection) {
    var data = [];

    if(selection === "1") {
        data = ___averages___.a1;
    }
    else if(selection === "3") {
        data = ___averages___.a3;
    }
    else if(selection === "7") {
        data = ___averages___.a7;
    }
    else if(selection === "-1") {
        data = ___averages___.am;
    }
    else {
        data = ___averages___.ay;
    }

    svg.append("path")
            .attr("d", line(data))
            .attr("stroke", color("average"))
            .attr("stroke-width", 1)
            .attr("fill", "none");

    var node = svg.selectAll(".averageNode")
        .data(data)
        .enter()
        .append("a")
        .attr("class", "averageNode")
        .attr("transform", function (d) {
            return "translate(" + x(d.time) + "," + y(d.value) + ")";
        });

    var circle = node.append("circle")
        .attr("stroke", "black")
        .attr("fill", color("average"))
        .attr("r", 3.75);

    $('svg .averageNode').tipsy({
        gravity: $.fn.tipsy.autoNS,
        html: true,
        title: function () {
            var d = this.__data__;

            var dataColor = function (c) {
                return '<span style="font-size: 150%; color: lightgreen;">' + c + "</span>";
            };

             return "Date: " + dataColor(d.time.toDateString()) +
                    "<br>Time: " + dataColor(d.time.toTimeString()) +
                    "<br>Average: " + dataColor(d.value);
        }
    });
}
